Repository Documentation
This document provides a comprehensive overview of the repository's structure and contents.
The first section, titled 'Directory/File Tree', displays the repository's hierarchy in a tree format.
In this section, directories and files are listed using tree branches to indicate their structure and relationships.
Following the tree representation, the 'File Content' section details the contents of each file in the repository.
Each file's content is introduced with a '[File Begins]' marker followed by the file's relative path,
and the content is displayed verbatim. The end of each file's content is marked with a '[File Ends]' marker.
This format ensures a clear and orderly presentation of both the structure and the detailed contents of the repository.

Directory/File Tree Begins -->

weatherlink/
├── CONTRIBUTING.md
├── LICENSE
├── README.md
├── loop_packet.md
├── requirements.txt
└── weatherlink
    ├── __init__.py
    ├── bar_trend.py
    ├── exceptions.py
    ├── models.py
    ├── server.py
    └── utils.py

<-- Directory/File Tree Ends

File Content Begin -->
[File Begins] CONTRIBUTING.md

[File Ends] CONTRIBUTING.md

[File Begins] LICENSE

[File Ends] LICENSE

[File Begins] README.md
# WeatherLink

WeatherLink is a Python library for retrieving current weather conditions from a Davis Weatherlink IP Logger.

## Features

- Retrieve current weather observations including temperature, humidity, wind speed, and more
- Automatically retry failed requests with configurable delays
- Extensive logging for diagnosing issues
- Fully type-hinted for ease of use and maintainability

## Installation

Install WeatherLink using pip:

```shell
pip install weatherlink
```

## Usage

Here's a basic example of how to use WeatherLink to retrieve the current weather conditions:

```python
from weatherlink import get_current_condition

host = '192.168.1.100'
port = 22222

try:
    observation = get_current_condition(host, port)
    print(f"Temperature: {observation.outside_temperature}°C")
    print(f"Humidity: {observation.outside_humidity}%")
    print(f"Wind Speed: {observation.wind_speed} km/h")
except Exception as e:
    print(f"Error: {e}")
```

For more detailed usage instructions and examples, please see the documentation.

## Documentation

Full documentation is available at <https://weatherlink.readthedocs.io/>.

## Contributing

Contributions are welcome! Please see CONTRIBUTING.md for details on how to contribute to the project.

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Acknowledgments

Thanks to the Davis Instruments team for providing the Weatherlink IP Logger and documentation.

## Support

If you have any questions, issues, or feature requests, please open an issue on GitHub.

[File Ends] README.md

[File Begins] loop_packet.md
# WeatherLink IP LOOP Packet Documentation

A LOOP Packet is 99 bytes long. Little Endian.

## Packet Structure

### Header

| Field       | Offset | Size | Explanation                                                                                             |
|-------------|--------|------|---------------------------------------------------------------------------------------------------------|
| 'L'  | 0      | 1    | Indicates the start of a LOOP packet, always 'L' (0x4C).                                                |
| 'O'        | 1    | 1   | 0x4F |
| 'O'        | 2    | 1   | 0x4F
| 'P' / Bar Trend   | 3      | 1    | Signed byte indicating the current 3-hour barometer trend: <br>-60 = 0xC4 (Falling Rapidly) <br>-20 = 0xEC (Falling Slowly) <br>0 = 0x00 (Steady) <br>20 = 0x14 (Rising Slowly) <br>60 = 0x3C (Rising Rapidly) <br>'P' (0x50) for Rev A Firmware (no trend info). |

### Data Records

| Field                       | Offset | Size | Explanation                                                                   |
|-----------------------------|--------|------|-------------------------------------------------------------------------------|
| Packet Type                 | 4      | 1    | Indicates LOOP (0) or LOOP2 (1) packet type.                                   |
| Next Record                 | 5      | 2    | Location in the archive memory where the next data packet will be written. This can be monitored to detect when a new record is created. |
| Barometer                   | 7      | 2    | Current barometer value in 1/1000 inHg. The barometric value should be between 20 inches and 32.5 inches in Vantage Pro and between 20 inches and 32.5 inches in both Vantage Pro Vantage Pro2. Values outside these ranges will not be logged.                                    |
| Inside Temperature          | 9      | 2    | Inside temperature in 1/10°F.                                                  |
| Inside Humidity             | 11     | 1    | Inside relative humidity in %.                                                 |
| Outside Temperature         | 12     | 2    | Outside temperature in 1/10°F.                                                 |
| Wind Speed                  | 14     | 1    | Wind speed in mph.                                                             |
| 10-Minute Average Wind Speed| 15     | 1    | Average wind speed in mph over 10 minutes.                                     |
| Wind Direction              | 16     | 2    | Wind direction in degrees.                                                     |
| Extra Temperatures          | 18     | 7    | Extra temperature values (7 sensors) in whole degrees °F.                      |
| Soil Temperatures           | 25     | 4    | Soil temperature values (4 sensors) in whole degrees °F.                       |
| Leaf Temperatures           | 29     | 4    | Leaf temperature values (4 sensors) in whole degrees °F.                       |
| Outside Humidity            | 33     | 1    | Outside relative humidity in %.                                                |
| Extra Humidity              | 34     | 7    | Extra humidity values (7 sensors) in %.                                        |
| Rain Rate                   | 41     | 2    | Rain rate in clicks (0.2mm or 0.01in).                                         |
| UV Index                    | 43     | 1    | UV index value.                                                                |
| Solar Radiation             | 44     | 2    | Solar radiation in W/m².                                                       |
| Storm Rain                  | 46     | 2    | Storm rain in clicks (0.2mm or 0.01in).                                        |
| Start Date of Storm         | 48     | 2    | Start date of the storm.                                                       |
| Day Rain                    | 50     | 2    | Daily rain in clicks (0.2mm or 0.01in).                                        |
| Month Rain                  | 52     | 2    | Monthly rain in clicks (0.2mm or 0.01in).                                      |
| Year Rain                   | 54     | 2    | Yearly rain in clicks (0.2mm or 0.01in).                                       |
| Day ET                      | 56     | 2    | Daily ET in clicks (0.01in).                                                   |
| Month ET                    | 58     | 2    | Monthly ET in clicks (0.01in).                                                 |
| Year ET                     | 60     | 2    | Yearly ET in clicks (0.01in).                                                  |
| Soil Moistures              | 62     | 4    | Soil moisture values (4 sensors).                                              |
| Leaf Wetness                | 66     | 4    | Leaf wetness values (4 sensors).                                               |

### Miscellaneous

| Field                       | Offset | Size | Explanation                                                                   |
|-----------------------------|--------|------|-------------------------------------------------------------------------------|
| Transmitter Battery Status  | 86     | 1    | Transmitter battery status.                                                   |
| Console Battery Voltage     | 87     | 2    | Voltage = ((Data *300)/512)/100.0                                            |
| Forecast Icons              | 89     | 1    | Forecast icons (bit map). See below                                           |
| Forecast Rule Number        | 90     | 1    | See Forecast Rules
| Time of Sunrise             | 91     | 2    | Time of sunrise (hour* 100 + minute).                                        |
| Time of Sunset              | 93     | 2    | Time of sunset (hour * 100 + minute).                                         |
| "\n" <LF> = 0x0A            | 95     | 1    |                                                                               |
| "\r" <CR> = 0x0D            | 96     | 1    |                                                                               |
| CRC                         | 97     | 2    | Cyclic Redundancy Check.                                                      |
| Total Length                | 99     |      |                                                                               |

### Forecast Icons

Forcast Icons are in byte 89:

| Value | Bit | Forecast Icon                   |
|-------|-----|---------------------------------|
|       | 0   | Rain within 12 hours            |
|       | 1   | Cloudy                          |
|       | 2   | Mostly cloudy                   |
|       | 3   | Partly cloudy                   |
|       | 4   | Clear                           |

For example this controls the icons:

- `0b0000 0000` (0x00) - Clear
- `0b0000 0001` (0x01) - Rain within 12 hours
- `0b0000 0010` (0x02) - Cloud
- `0b0000 0100` (0x04) - Partly Cloudy
- `0b0000 1000` (0x08) - Sun
- `0b0001 0000` (0x10) - Snow

These then combine to create complex forecasts:

- `0b0000 1000` (0x08) - Sun = Mostly Clear
- `0b0000 0110` (0x06) - Partial Sun + Cloud = Partly Cloudy
- `0x0000 0010` (0x02) - Cloud = Mostly Cloudy
- `0x0000 0011` (0x03) - Rain + Cloud = Mostly Cloudy, Rain within 12 hours
- `0x0001 0010` (0x12) - Cloud + Snow = Mostly Cloudy, Snow within 12 hours
- `0x0001 0011` (0x13) - Cloud + Rain + Snow = Mostly Cloud, Rain or Snow within 12 hours
- `0x0000 0111` (0x07) - Partial Sun + Cloud + Rain = Partly Cloudy, Rain within 12 hours
- `0x0001 0110` (0x16) - Partial Sun + Cloud + Snow = Partly Cloudy, Snow within 12 hours
- `0x0001 0111` (0x17) - Partial Sun + Cloud + Rain + Snow = Partly Cloudy, Snow or Rain within 12 hours

[File Ends] loop_packet.md

[File Begins] requirements.txt
bitstring
python-dateutil
flask

[File Ends] requirements.txt

  [File Begins] weatherlink/__init__.py
  """
  Tools for retrieving the current conditions from a Davis Weatherlink IP Logger
  """
  # Standard Library
  import logging
  import socket
  import time
  
  # Supercell Code
  from exceptions import BadCRC, NotAcknowledged, UnknownResponseCode
  from models import StationObservation
  from utils import connect, receive_data, request
  
  LOOP_COMMAND = b"LOOP %d\n"
  LOOP_RECORD_SIZE_BYTES = 99
  LOOP_RECORD_SIZE_BITS = LOOP_RECORD_SIZE_BYTES * 8
  
  
  logger = logging.getLogger(__name__)
  
  
  def get_current(host: str, port: int) -> bytes:
      """Gets the current readings on the device."""
      sock = connect(host, port)
      loop_data = b""
      try:
          try:
              request(sock, LOOP_COMMAND % 1)
          except (BadCRC, NotAcknowledged, UnknownResponseCode):
              logger.exception("Could not issue loop command.")
              raise
  
          while len(loop_data) != LOOP_RECORD_SIZE_BYTES:
              data = receive_data(sock)
              loop_data += data
      except socket.timeout:
          logger.exception("Could not issue loop command")
          raise NotAcknowledged()
      finally:
          sock.close()
      return loop_data
  
  
  def get_current_condition(host: str, port: int) -> StationObservation:
      """Obtains the current conditions."""
      try:
          current_bytes = get_current(host, port)
      except (BadCRC, NotAcknowledged, UnknownResponseCode):
          # Wait a little and try again.
          time.sleep(0.1)
          try:
              current_bytes = get_current(host, port)
          except (BadCRC, NotAcknowledged, UnknownResponseCode):
              # Wait twice as long and try again.
              time.sleep(1.0)
              try:
                  current_bytes = get_current(host, port)
              except (BadCRC, NotAcknowledged, UnknownResponseCode):
                  # Ok just give up.
                  raise
      return StationObservation.init_with_bytes(current_bytes)

  [File Ends] weatherlink/__init__.py

  [File Begins] weatherlink/bar_trend.py
  from enum import Enum
  
  
  class BarTrend(int, Enum):
      """
      Represents the trend of a barometer reading.
  
      Each trend is associated with a code and a description.
      """
  
      FALLING_RAPIDLY = -60
      FALLING_SLOWLY = -20
      STABLE = 0
      RISING_SLOWLY = 20
      RISING_RAPIDLY = 60

  [File Ends] weatherlink/bar_trend.py

  [File Begins] weatherlink/exceptions.py
  class NotAcknowledged(Exception):
      """When the device does not acknowledge a command"""
      pass
  
  
  class BadCRC(Exception):
      """When the device believes your CRC to be bad."""
      pass
  
  
  class UnknownResponseCode(Exception):
      """When the device returns an unknown response code."""
      pass

  [File Ends] weatherlink/exceptions.py

  [File Begins] weatherlink/models.py
  # Standard Library
  import datetime
  import json
  import random
  from typing import Dict, List, Optional, Literal
  
  # Third Party Code
  from bitstring import BitStream
  from dateutil.tz import tzlocal
  
  # Supercell Code
  from exceptions import BadCRC
  from utils import crc16, CRC16_TABLE, make_time
  from bar_trend import BarTrend
  
  FORECAST_RULES = [
      "Mostly clear and cooler.",
      "Mostly clear with little temperature change.",
      "Mostly clear for 12 hours with little temperature change.",
      "Mostly clear for 12 to 24 hours and cooler.",
      "Mostly clear with little temperature change.",
      "Partly cloudy and cooler.",
      "Partly cloudy with little temperature change.",
      "Partly cloudy with little temperature change.",
      "Mostly clear and warmer.",
      "Partly cloudy with little temperature change.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds and warmer. Precipitation possible within 24 to 48 hours.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds with little temperature change. Precipitation possible within 24 hours.",
      "Mostly clear with little temperature change.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds with little temperature change. Precipitation possible within 12 hours.",
      "Mostly clear with little temperature change.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds and warmer. Precipitation possible within 24 hours.",
      "Mostly clear and warmer. Increasing winds.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds and warmer. Precipitation possible within 12 hours. Increasing winds.",
      "Mostly clear and warmer. Increasing winds.",
      "Increasing clouds and warmer.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds and warmer. Precipitation possible within 12 hours. Increasing winds.",
      "Mostly clear and warmer. Increasing winds.",
      "Increasing clouds and warmer.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds and warmer. Precipitation possible within 12 hours. Increasing winds.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Mostly clear and warmer. Precipitation possible within 48 hours.",
      "Mostly clear and warmer.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds with little temperature change. Precipitation possible within 24 to 48 hours.",
      "Increasing clouds with little temperature change.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds and warmer. Precipitation possible within 12 to 24 hours.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds and warmer. Precipitation possible within 12 to 24 hours. Windy.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds and warmer. Precipitation possible within 12 to 24 hours. Windy.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds and warmer. Precipitation possible within 6 to 12 hours.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds and warmer. Precipitation possible within 6 to 12 hours. Windy.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds and warmer. Precipitation possible within 12 to 24 hours. Windy.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds and warmer. Precipitation possible within 12 hours.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds and warmer. Precipitation likley.",
      "Clearing and cooler. Precipitation ending within 6 hours.",
      "Partly cloudy with little temperature change.",
      "Clearing and cooler. Precipitation ending within 6 hours.",
      "Mostly clear with little temperature change.",
      "Clearing and cooler. Precipitation ending within 6 hours.",
      "Partly cloudy and cooler.",
      "Partly cloudy with little temperature change.",
      "Mostly clear and cooler.",
      "Clearing and cooler. Precipitation ending within 6 hours.",
      "Mostly clear with little temperature change.",
      "Clearing and cooler. Precipitation ending within 6 hours.",
      "Mostly clear and cooler.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds with little temperature change. Precipitation possible within 24 hours.",
      "Mostly cloudy and cooler. Precipitation continuing.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Mostly cloudy and cooler. Precipitation likely.",
      "Mostly cloudy with little temperature change. Precipitation continuing.",
      "Mostly cloudy with little temperature change. Precipitation likely.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds and cooler. Precipitation possible and windy within 6 hours.",
      "Increasing clouds with little temperature change. Precipitation possible and windy within 6 hours.",
      "Mostly cloudy and cooler. Precipitation continuing. Increasing winds.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Mostly cloudy and cooler. Precipitation likely. Increasing winds.",
      "Mostly cloudy with little temperature change. Precipitation continuing. Increasing winds.",
      "Mostly cloudy with little temperature change. Precipitation likely. Increasing winds.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds and cooler. Precipitation possible within 12 to 24 hours possible wind shift to the W NW or N.",
      "Increasing clouds with little temperature change. Precipitation possible within 12 to 24 hours possible wind "
      "shift to the W NW or N.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds and cooler. Precipitation possible within 6 hours possible wind shift to the W NW or N.",
      "Increasing clouds with little temperature change. Precipitation possible within 6 hours possible wind shift to "
      "the W NW or N.",
      "Mostly cloudy and cooler. Precipitation ending within 12 hours possible wind shift to the W NW or N.",
      "Mostly cloudy and cooler. Possible wind shift to the W NW or N.",
      "Mostly cloudy with little temperature change. Precipitation ending within 12 hours possible wind shift to the W "
      "NW or N.",
      "Mostly cloudy with little temperature change. Possible wind shift to the W NW or N.",
      "Mostly cloudy and cooler. Precipitation ending within 12 hours possible wind shift to the W NW or N.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Mostly cloudy and cooler. Precipitation possible within 24 hours possible wind shift to the W NW or N.",
      "Mostly cloudy with little temperature change. Precipitation ending within 12 hours possible wind shift to the W "
      "NW or N.",
      "Mostly cloudy with little temperature change. Precipitation possible within 24 hours possible wind shift to the "
      "W NW or N.",
      "Clearing cooler and windy. Precipitation ending within 6 hours.",
      "Clearing cooler and windy.",
      "Mostly cloudy and cooler. Precipitation ending within 6 hours. Windy with possible wind shift to the W NW or N.",
      "Mostly cloudy and cooler. Windy with possible wind shift to the W NW or N.",
      "Clearing cooler and windy.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Mostly cloudy with little temperature change. Precipitation possible within 12 hours. Windy.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds and cooler. Precipitation possible within 12 hours possibly heavy at times. Windy.",
      "Mostly cloudy and cooler. Precipitation ending within 6 hours. Windy.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Mostly cloudy and cooler. Precipitation possible within 12 hours. Windy.",
      "Mostly cloudy and cooler. Precipitation ending in 12 to 24 hours.",
      "Mostly cloudy and cooler.",
      "Mostly cloudy and cooler. Precipitation continuing possible heavy at times. Windy.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Mostly cloudy and cooler. Precipitation possible within 6 to 12 hours. Windy.",
      "Mostly cloudy with little temperature change. Precipitation continuing possibly heavy at times. Windy.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Mostly cloudy with little temperature change. Precipitation possible within 6 to 12 hours. Windy.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds with little temperature change. Precipitation possible within 12 hours possibly heavy at "
      "times. Windy.",
      "Mostly cloudy and cooler. Windy.",
      "Mostly cloudy and cooler. Precipitation continuing possibly heavy at times. Windy.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Mostly cloudy and cooler. Precipitation likely possibly heavy at times. Windy.",
      "Mostly cloudy with little temperature change. Precipitation continuing possibly heavy at times. Windy.",
      "Mostly cloudy with little temperature change. Precipitation likely possibly heavy at times. Windy.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds and cooler. Precipitation possible within 6 hours. Windy.",
      "Increasing clouds with little temperature change. Precipitation possible within 6 hours. Windy",
      "Increasing clouds and cooler. Precipitation continuing. Windy with possible wind shift to the W NW or N.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Mostly cloudy and cooler. Precipitation likely. Windy with possible wind shift to the W NW or N.",
      "Mostly cloudy with little temperature change. Precipitation continuing. Windy with possible wind shift to the W "
      "NW or N.",
      "Mostly cloudy with little temperature change. Precipitation likely. Windy with possible wind shift to the W NW "
      "or N.",
      "Increasing clouds and cooler. Precipitation possible within 6 hours. Windy with possible wind shift to the W NW "
      "or N.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds and cooler. Precipitation possible within 6 hours possible wind shift to the W NW or N.",
      "Increasing clouds with little temperature change. Precipitation possible within 6 hours. Windy with possible "
      "wind shift to the W NW or N.",
      "Increasing clouds with little temperature change. Precipitation possible within 6 hours possible wind shift to "
      "the W NW or N.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds and cooler. Precipitation possible within 6 hours. Windy with possible wind shift to the W NW "
      "or N.",
      "Increasing clouds with little temperature change. Precipitation possible within 6 hours. Windy with possible "
      "wind shift to the W NW or N.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Increasing clouds and cooler. Precipitation possible within 12 to 24 hours. Windy with possible wind shift to "
      "the W NW or N.",
      "Increasing clouds with little temperature change. Precipitation possible within 12 to 24 hours. Windy with "
      "possible wind shift to the W NW or N.",
      "Mostly cloudy and cooler. Precipitation possibly heavy at times and ending within 12 hours. Windy with possible "
      "wind shift to the W NW or N.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Mostly cloudy and cooler. Precipitation possible within 6 to 12 hours possibly heavy at times. Windy with "
      "possible wind shift to the W NW or N.",
      "Mostly cloudy with little temperature change. Precipitation ending within 12 hours. Windy with possible wind "
      "shift to the W NW or N.",
      "Mostly cloudy with little temperature change. Precipitation possible within 6 to 12 hours possibly heavy at "
      "times. Windy with possible wind shift to the W NW or N.",
      "Mostly cloudy and cooler. Precipitation continuing.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Mostly cloudy and cooler. Precipitation likely. Windy with possible wind shift to the W NW or N.",
      "Mostly cloudy with little temperature change. Precipitation continuing.",
      "Mostly cloudy with little temperature change. Precipitation likely.",
      "Partly cloudy with little temperature change.",
      "Mostly clear with little temperature change.",
      "Mostly cloudy and cooler. Precipitation possible within 12 hours possibly heavy at times. Windy.",
      "FORECAST REQUIRES 3 HOURS OF RECENT DATA",
      "Mostly clear and cooler.",
      "Mostly clear and cooler.",
      "Mostly clear and cooler.",
      "Unknown forecast rule.",
  ]
  
  LOOP_RECORD_SIZE_BYTES = 99
  LOOP_RECORD_SIZE_BITS = LOOP_RECORD_SIZE_BYTES * 8
  
  REVISION_A = "A"
  REVISION_B = "B"
  
  LOOP_HEADER = b"LOOP"
  
  LOOP2_PACKET_TYPE = "LOOP2"
  LOOP_PACKET_TYPE = "LOOP"
  
  LUNATION_LOOKUP = {
      0.05: "New Moon",
      0.15: "Crescent",
      0.25: "First Quarter",
      0.45: "Gibbous",
      0.55: "Full Moon",
      0.65: "Gibbous",
      0.85: "Last Quarter",
      0.95: "Crescent",
      1.00: "New Moon",
  }
  
  
  WIND_DIRECTION_LOOKUP = {
      10: "N",
      35: "NNE",
      55: "NE",
      80: "NEE",
      110: "E",
      125: "SEE",
      145: "SE",
      170: "SSE",
      190: "S",
      215: "SSW",
      235: "SW",
      260: "SWW",
      280: "W",
      305: "NWW",
      325: "NW",
      350: "NNW",
      360: "N",
  }
  
  FORECAST_ICONS_LOOKUP = {
      1: "Rain within 12 hrs",
      2: "Cloudy",
      4: "Cloud + Sunny",
      8: "Sunny",
      16: "Snow within 12hrs",
  }
  
  
  def _lunation_text(lunation: float) -> str:
      """Converts the lunation value to a string."""
      if lunation < 0 or lunation > 1.0:
          raise ValueError("Lunation must be between 0.0 - 1.0")
  
      if lunation < 0.5:
          direction = "Waxing"
      else:
          direction = "Waning"
  
      lunation_text = "Unknown Lunation"
  
      for lunation_value, lunation_text in LUNATION_LOOKUP.items():
          if lunation >= lunation_value:
              continue
          break
  
      return "{text} ({direction})".format(text=lunation_text, direction=direction)
  
  
  def _wind_direction_text(wind_direction: int) -> str:
      """Converts the wind direction value to text."""
      if wind_direction < 0 or wind_direction > 360:
          raise ValueError(
              "Wind direction (%s) must be between 0 - 360" % (wind_direction)
          )
  
      wind_direction_text = "Unknown Wind Direction"
  
      for wind_direction_value, wind_direction_text in WIND_DIRECTION_LOOKUP.items():
          if wind_direction >= wind_direction_value:
              continue
          break
      return wind_direction_text
  
  
  def _forecast_icons_text(forecast_icons: int) -> List[str]:
      if forecast_icons < 0 or forecast_icons > 31:
          raise ValueError("Forecast icons must be between 0 - 31.")
      return [
          forecast_icon_text
          for bit_position, forecast_icon_text in FORECAST_ICONS_LOOKUP.items()
          if ((forecast_icons & bit_position) == bit_position)
      ]
  
  
  class StationObservation(object):
      """A station observation"""
  
      bar_trend: int
      barometer: float
      inside_temperature: float
      inside_humidity: float
      outside_temperature: float
      outside_humidity: float
      wind_speed: int
      ten_min_avg_wind_speed: int
      wind_direction: int
      rain_rate: int
      console_battery_voltage: float
      forecast_icons: int
      forecast_rule_number: int
      sunrise: datetime.time
      sunset: datetime.time
      observation_made_at: datetime.datetime
      identitier: int
  
      def __init__(
          self,
          bar_trend: BarTrend,
          barometer: float,
          inside_temperature: float,
          inside_humidity: float,
          outside_temperature: float,
          outside_humidity: float,
          wind_speed: int,
          ten_min_avg_wind_speed: int,
          wind_direction: int,
          rain_rate: int,
          console_battery_voltage: float,
          forecast_icons: int,
          forecast_rule_number: int,
          sunrise: datetime.time,
          sunset: datetime.time,
          observation_made_at: Optional[datetime.datetime] = None,
          identifier: Optional[int] = None,
      ) -> None:
          self.bar_trend = bar_trend
          self.barometer = float(barometer)
          self.inside_temperature = float(inside_temperature)
          self.inside_humidity = float(inside_humidity)
          self.outside_temperature = float(outside_temperature)
          self.outside_humidity = float(outside_humidity)
          self.wind_speed = int(wind_speed)
          self.ten_min_avg_wind_speed = int(ten_min_avg_wind_speed)
          self.wind_direction = int(wind_direction)
          self.rain_rate = int(rain_rate)
          self.console_battery_voltage = float(console_battery_voltage)
          self.forecast_icons = int(forecast_icons)
          self.forecast_rule_number = int(forecast_rule_number)
          self.sunrise = sunrise
          self.sunset = sunset
          self.observation_made_at = (
              observation_made_at or datetime.datetime.now(tzlocal())
          ).isoformat()
          self.identifier = identifier or random.getrandbits(32)
  
      def wind_direction_text(self) -> str:
          """Produces a string description of the wind direction."""
          return _wind_direction_text(self.wind_direction)
  
      def forecast_icons_text(self) -> List[str]:
          return _forecast_icons_text(self.forecast_icons)
  
      def forecast_text(self) -> str:
          """Returns the string version of the forecast rule."""
          return FORECAST_RULES[self.forecast_rule_number]
  
      def to_dict(self) -> Dict:
          """A dictionary representation of the observation."""
          return {
              "bar_trend": self.bar_trend,
              "barometer": self.barometer,
              "inside_temperature": self.inside_temperature,
              "inside_humidity": self.inside_humidity,
              "outside_temperature": self.outside_temperature,
              "outside_humidity": self.outside_humidity,
              "wind_speed": self.wind_speed,
              "ten_min_avg_wind_speed": self.ten_min_avg_wind_speed,
              "wind_direction": self.wind_direction,
              "wind_direction_text": self.wind_direction_text(),
              "rain_rate": self.rain_rate,
              "console_battery_voltage": self.console_battery_voltage,
              "forecast_icons": self.forecast_icons,
              "forecast_icons_text": self.forecast_icons_text(),
              "forecast_rule_number": self.forecast_rule_number,
              "forecast_text": self.forecast_text(),
              "sunrise": self.sunrise.isoformat(),
              "sunset": self.sunset.isoformat(),
              "observation_made_at": self.observation_made_at,
              "identifier": self.identifier,
          }
  
      @classmethod
      def validate_record(
          cls, record_bitstream: BitStream, validate_crc: bool = True
      ) -> None:
          """Validates a record."""
          if len(record_bitstream) != LOOP_RECORD_SIZE_BITS:
              print(record_bitstream)
              raise ValueError(
                  "Records should be %d bits in length. It is %d"
                  % (LOOP_RECORD_SIZE_BITS, len(record_bitstream))
              )
          if validate_crc and crc16(record_bitstream) != 0:
              raise BadCRC()
  
      @classmethod
      def validate_packet_type(cls, record_bitstream: BitStream) -> None:
          """Validates the packet type."""
          packet_type = record_bitstream.read(8).int and "LOOP2" or "LOOP"
          if packet_type == LOOP2_PACKET_TYPE:
              raise ValueError("LOOP2 Packet not yet supported.")
  
      @classmethod
      def init_with_bytes(
          cls,
          record_bytes: bytes,
          identifier: Optional[int] = None,
          observation_made_at: Optional[datetime.datetime] = None,
      ):
          """Creates a new Station Observation from record of bytes."""
          record_bitstream = BitStream(record_bytes)
          cls.validate_record(record_bitstream, False)
          # Set to position four
          record_bitstream.pos = 24
          # Awkwardly positioned bar trend
          bar_trend = BarTrend(record_bitstream.read(8).intle)
          cls.validate_packet_type(record_bitstream)
          # Skip 2 bytes
          record_bitstream.read(16)
  
          barometer = record_bitstream.read(16).uintle / 1000.0
          inside_temperature = record_bitstream.read(16).intle / 10.0
          inside_humidity = record_bitstream.read(8).uintle
          outside_temperature = record_bitstream.read(16).intle / 10.0
          wind_speed = record_bitstream.read(8).uintle
          ten_min_avg_wind_speed = record_bitstream.read(8).uintle
          wind_direction = record_bitstream.read(
              16
          ).uintle  # 0º = None, 90º = E, 180 = S, 270 = W, 360 = N
  
          # Skip "extra temperatures"
          record_bitstream.read(
              56
          )  # Each byte is a one extra temperature value in whole degrees F
          # with # an offset  of 90 degrees. 0 = -90, 100 = 10, 169 = 79
          # Skip soil temperatures
          record_bitstream.read(32)
          # Skip leaf temperatures
          record_bitstream.read(32)
  
          outside_humidity = record_bitstream.read(8).uintle
  
          # Skip extra humidities
          record_bitstream.read(56)
  
          rain_rate = record_bitstream.read(16).uintle
  
          # ultraviolet_index
          record_bitstream.read(8)
  
          # solar_radiation
          record_bitstream.read(16)
  
          # storm_rain
          record_bitstream.read(16)
  
          # start_date_of_storm
          record_bitstream.read(16)
  
          # day_rain
          record_bitstream.read(16)
  
          # month_rain
          record_bitstream.read(16)
  
          # year_rain
          record_bitstream.read(16)
  
          # day_et
          record_bitstream.read(16)
  
          # month_et
          record_bitstream.read(16)
  
          # year_et
          record_bitstream.read(16)
  
          # Skip extra soil moistures
          record_bitstream.read(32)
          # Skip extra leaf wetnesses
          record_bitstream.read(32)
  
          # inside_alarms
          record_bitstream.read(8)
  
          # rain_alarms
          record_bitstream.read(8)
  
          # outside_alarms
          record_bitstream.read(16)
  
          # Skip extra temp/humidity alarms
          record_bitstream.read(64)
          # Skip extra soil leaf alarms
          record_bitstream.read(32)
  
          # Skip tx battery status
          record_bitstream.read(8)
  
          console_battery_voltage = (
              (record_bitstream.read(16).uintle * 300.0) / 512.0
          ) / 100.0
          forecast_icons = record_bitstream.read(8).uintle
          forecast_rule_number = record_bitstream.read(8).uintle
          sunrise = make_time(record_bitstream.read(16).uintle)
          sunset = make_time(record_bitstream.read(16).uintle)
  
          return cls(
              bar_trend=bar_trend,
              barometer=barometer,
              inside_temperature=inside_temperature,
              inside_humidity=inside_humidity,
              outside_temperature=outside_temperature,
              outside_humidity=outside_humidity,
              wind_speed=wind_speed,
              wind_direction=wind_direction,
              ten_min_avg_wind_speed=ten_min_avg_wind_speed,
              rain_rate=rain_rate,
              console_battery_voltage=console_battery_voltage,
              forecast_icons=forecast_icons,
              forecast_rule_number=forecast_rule_number,
              sunrise=sunrise,
              sunset=sunset,
              identifier=identifier,
              observation_made_at=observation_made_at,
          )
  
  
  if __name__ == "__main__":
      test_bytes = b"LOO\x14\x00\xb1\x02It\x1e\x03\x0f\x8a\x02\x02\x03\x8c\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x1b\xff\xff\xff\xff\xff\xff\xff\x00\x00V\xff\x7f\x00\x00\xff\xff\x00\x00\x02\x00\x02\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x006\x03\x03\xc0\x1b\x02\xe3\x07\n\r\xee\x00"
      observation = StationObservation.init_with_bytes(test_bytes)
      print(json.dumps(observation.to_dict()))

  [File Ends] weatherlink/models.py

  [File Begins] weatherlink/server.py

  [File Ends] weatherlink/server.py

  [File Begins] weatherlink/utils.py
  # Standard Library
  import datetime
  import logging
  import socket
  from typing import List, Optional
  
  # Third Party Code
  from bitstring import BitStream
  
  # Supercell Code
  from exceptions import BadCRC, NotAcknowledged, UnknownResponseCode
  
  socket.setdefaulttimeout(2.0)
  logger = logging.getLogger(__name__)
  
  SOCKET_BUFFER_SIZE = 16
  
  RESPONSE_CODE_SIZE = 1
  
  NACK_RESPONSE_CODE = 0x21
  BAD_CRC_RESPONSE_CODE = 0x18
  ACKNOWLEDGED_RESPONSE_CODE = 0x06
  
  CRC16_TABLE = [
      0x0000,
      0x1021,
      0x2042,
      0x3063,
      0x4084,
      0x50A5,
      0x60C6,
      0x70E7,
      0x8108,
      0x9129,
      0xA14A,
      0xB16B,
      0xC18C,
      0xD1AD,
      0xE1CE,
      0xF1EF,
      0x1231,
      0x0210,
      0x3273,
      0x2252,
      0x52B5,
      0x4294,
      0x72F7,
      0x62D6,
      0x9339,
      0x8318,
      0xB37B,
      0xA35A,
      0xD3BD,
      0xC39C,
      0xF3FF,
      0xE3DE,
      0x2462,
      0x3443,
      0x0420,
      0x1401,
      0x64E6,
      0x74C7,
      0x44A4,
      0x5485,
      0xA56A,
      0xB54B,
      0x8528,
      0x9509,
      0xE5EE,
      0xF5CF,
      0xC5AC,
      0xD58D,
      0x3653,
      0x2672,
      0x1611,
      0x0630,
      0x76D7,
      0x66F6,
      0x5695,
      0x46B4,
      0xB75B,
      0xA77A,
      0x9719,
      0x8738,
      0xF7DF,
      0xE7FE,
      0xD79D,
      0xC7BC,
      0x48C4,
      0x58E5,
      0x6886,
      0x78A7,
      0x0840,
      0x1861,
      0x2802,
      0x3823,
      0xC9CC,
      0xD9ED,
      0xE98E,
      0xF9AF,
      0x8948,
      0x9969,
      0xA90A,
      0xB92B,
      0x5AF5,
      0x4AD4,
      0x7AB7,
      0x6A96,
      0x1A71,
      0x0A50,
      0x3A33,
      0x2A12,
      0xDBFD,
      0xCBDC,
      0xFBBF,
      0xEB9E,
      0x9B79,
      0x8B58,
      0xBB3B,
      0xAB1A,
      0x6CA6,
      0x7C87,
      0x4CE4,
      0x5CC5,
      0x2C22,
      0x3C03,
      0x0C60,
      0x1C41,
      0xEDAE,
      0xFD8F,
      0xCDEC,
      0xDDCD,
      0xAD2A,
      0xBD0B,
      0x8D68,
      0x9D49,
      0x7E97,
      0x6EB6,
      0x5ED5,
      0x4EF4,
      0x3E13,
      0x2E32,
      0x1E51,
      0x0E70,
      0xFF9F,
      0xEFBE,
      0xDFDD,
      0xCFFC,
      0xBF1B,
      0xAF3A,
      0x9F59,
      0x8F78,
      0x9188,
      0x81A9,
      0xB1CA,
      0xA1EB,
      0xD10C,
      0xC12D,
      0xF14E,
      0xE16F,
      0x1080,
      0x00A1,
      0x30C2,
      0x20E3,
      0x5004,
      0x4025,
      0x7046,
      0x6067,
      0x83B9,
      0x9398,
      0xA3FB,
      0xB3DA,
      0xC33D,
      0xD31C,
      0xE37F,
      0xF35E,
      0x02B1,
      0x1290,
      0x22F3,
      0x32D2,
      0x4235,
      0x5214,
      0x6277,
      0x7256,
      0xB5EA,
      0xA5CB,
      0x95A8,
      0x8589,
      0xF56E,
      0xE54F,
      0xD52C,
      0xC50D,
      0x34E2,
      0x24C3,
      0x14A0,
      0x0481,
      0x7466,
      0x6447,
      0x5424,
      0x4405,
      0xA7DB,
      0xB7FA,
      0x8799,
      0x97B8,
      0xE75F,
      0xF77E,
      0xC71D,
      0xD73C,
      0x26D3,
      0x36F2,
      0x0691,
      0x16B0,
      0x6657,
      0x7676,
      0x4615,
      0x5634,
      0xD94C,
      0xC96D,
      0xF90E,
      0xE92F,
      0x99C8,
      0x89E9,
      0xB98A,
      0xA9AB,
      0x5844,
      0x4865,
      0x7806,
      0x6827,
      0x18C0,
      0x08E1,
      0x3882,
      0x28A3,
      0xCB7D,
      0xDB5C,
      0xEB3F,
      0xFB1E,
      0x8BF9,
      0x9BD8,
      0xABBB,
      0xBB9A,
      0x4A75,
      0x5A54,
      0x6A37,
      0x7A16,
      0x0AF1,
      0x1AD0,
      0x2AB3,
      0x3A92,
      0xFD2E,
      0xED0F,
      0xDD6C,
      0xCD4D,
      0xBDAA,
      0xAD8B,
      0x9DE8,
      0x8DC9,
      0x7C26,
      0x6C07,
      0x5C64,
      0x4C45,
      0x3CA2,
      0x2C83,
      0x1CE0,
      0x0CC1,
      0xEF1F,
      0xFF3E,
      0xCF5D,
      0xDF7C,
      0xAF9B,
      0xBFBA,
      0x8FD9,
      0x9FF8,
      0x6E17,
      0x7E36,
      0x4E55,
      0x5E74,
      0x2E93,
      0x3EB2,
      0x0ED1,
      0x1EF0,
  ]
  
  
  def crc16(data: BitStream) -> int:
      """
      Calculate CRC16 using the given table.
  
      - `data`: The data to calculate the CRC of
  
      Return calculated value of CRC. Should be 0.
      """
      crc = 0
      for data_byte in iter(data):
          high_byte = crc >> 8
          low_byte = (crc & 0x00FF) << 8
          table_index = high_byte ^ data_byte
          table_value = CRC16_TABLE[table_index]
          crc = low_byte ^ table_value
      return crc
  
  
  def connect(host: str, port: int) -> socket.socket:
      """Connects to a TCP/IP host."""
      sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      logger.info("Connecting to %s:%s", host, port)
      sock.connect((host, port))
      return sock
  
  
  def request(sock: socket.socket, body: bytes) -> None:
      """Send a request to a socket."""
      sock.sendall(body)
      response_code = BitStream(receive_data(sock, RESPONSE_CODE_SIZE)).int
      if response_code == NACK_RESPONSE_CODE:
          logger.error("Request was not acknowledged.")
          raise NotAcknowledged()
      elif response_code == BAD_CRC_RESPONSE_CODE:
          logger.error("Request contained a bad CRC, retransmit.")
          raise BadCRC()
      elif response_code == ACKNOWLEDGED_RESPONSE_CODE:
          logger.info("Request was acknowledged.")
      else:
          logger.error("Unknown response code %s", response_code)
          raise UnknownResponseCode()
  
  
  def receive_data(sock: socket.socket, buffer_size: Optional[int] = None) -> bytes:
      """Receives data from a socket."""
      return sock.recv(buffer_size or SOCKET_BUFFER_SIZE)
  
  
  def make_time(time_stamp: int) -> datetime.time:
      """Converts an integer time to a time object."""
      hour = int(time_stamp / 100)
      minute = time_stamp - (hour * 100)
      return datetime.time(hour=hour, minute=minute)
  
  
  def make_datetime(
      date_stamp: BitStream, time_stamp: int
  ) -> Optional[datetime.datetime]:
      """Converts a date stamp and time stamp into a datetime object."""
      year = date_stamp.read(7).uint
      month = date_stamp.read(4).uint
      day = date_stamp.read(5).uint
      timestamp = make_time(time_stamp)
      return datetime.datetime(
          year=2000 + year,
          month=month,
          day=day,
          hour=timestamp.hour,
          minute=timestamp.minute,
      )
  
  
  def test_crc16():
      # Known input data for which we know the expected CRC result
      # This data should be a list of bytes. Example: b"hello world"
      input_data = b"hello world"
  
      # Convert input data to a list of integers representing bytes, as expected by the crc16 function
      input_data_as_bytes = BitStream(input_data)
  
      # Expected CRC result after processing the input data
      # This value should be changed to what is actually expected for the given input
      # For demonstration, let's assume we expect 0x1D0F, but you should calculate this based on your CRC16 variant
      expected_crc_result = 0x593E
  
      # Call the crc16 function with the test data
      calculated_crc = crc16(input_data_as_bytes)
  
      # Assert that the calculated CRC matches the expected result
      assert (
          calculated_crc == expected_crc_result
      ), f"Expected CRC: {expected_crc_result}, but got: {calculated_crc}"
  
  
  def test_connect():
      host = "127.0.0.1"
      port = 22222
      sock = connect(host, port)
  
      LOOP_COMMAND = b"LOOP %d\n"
      LOOP_RECORD_SIZE_BYTES = 99
      LOOP_RECORD_SIZE_BITS = LOOP_RECORD_SIZE_BYTES * 8
  
      loop_data = b""
      try:
          try:
              request(sock, LOOP_COMMAND % 1)
          except (BadCRC, NotAcknowledged, UnknownResponseCode):
              logger.exception("Could not issue loop command.")
              raise
  
          while len(loop_data) != LOOP_RECORD_SIZE_BYTES:
              data = receive_data(sock)
              loop_data += data
      except socket.timeout:
          logger.exception("Could not issue loop command")
          raise NotAcknowledged()
      finally:
          sock.close()
      print(loop_data)
  
  
  if __name__ == "__main__":
      test_crc16()
      test_connect()
      logger.info("All tests passed.")

  [File Ends] weatherlink/utils.py


<-- File Content Ends

